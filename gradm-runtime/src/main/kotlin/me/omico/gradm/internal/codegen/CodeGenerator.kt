package me.omico.gradm.internal.codegen

import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.FileSpec
import me.omico.gradm.internal.VersionsMeta
import me.omico.gradm.internal.YamlDocument
import me.omico.gradm.internal.config.gradmVersion
import me.omico.gradm.internal.path.GradmPaths
import me.omico.gradm.internal.path.RootProjectPaths
import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes
import java.util.Locale

internal fun generateDependenciesProjectFiles(document: YamlDocument, versionsMeta: VersionsMeta) {
    RootProjectPaths.copyTo(GradmPaths.GeneratedDependenciesProject)
    generateGradleBuildScript(document.gradmVersion)
    clearDir(GradmPaths.GeneratedDependenciesProject.sourceDir)
    generateDependenciesSourceFiles(document, versionsMeta)
    generateVersionsSourceFile(document)
}

internal fun clearDir(dir: Path) {
    if (Files.exists(dir)) {
        Files.walkFileTree(
            dir,
            object : SimpleFileVisitor<Path>() {
                override fun visitFile(file: Path, attrs: BasicFileAttributes): FileVisitResult {
                    Files.deleteIfExists(file)
                    return FileVisitResult.CONTINUE
                }
            }
        )
    }
    Files.createDirectories(dir)
}

private val defaultSuppressWarningTypes = arrayOf(
    "MemberVisibilityCanBePrivate",
    "RedundantVisibilityModifier",
    "unused",
)

internal fun FileSpec.Builder.addSuppressWarningTypes(vararg types: String = defaultSuppressWarningTypes): FileSpec.Builder =
    AnnotationSpec.builder(Suppress::class)
        .addMember("%S,".repeat(types.count()).trimEnd(','), *types)
        .build()
        .let(::addAnnotation)

internal fun FileSpec.Builder.addGradmComment(): FileSpec.Builder =
    addComment(
        """

        Generated by Gradm, will be overwritten by every dependencies update, do not edit!!!

        """.trimIndent()
    )

internal fun String.capitalize() =
    replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() }
