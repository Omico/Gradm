/*
 * Copyright 2023 Omico
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@file:JvmName("DslGenerator")

package me.omico.elucidator

import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.LambdaTypeName
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.UNIT
import kotlin.io.path.Path

fun main(arguments: Array<String>) {
    val outputDirectory = Path(arguments.first())
    types.forEach { type ->
        FileSpec.builder(GENERATED_PACKAGE_NAME, type.generatedFileName)
            .addFileComment(
                """
                |
                |Generated by DslGenerator from kotlinpoet-ktx. Do not edit directly!!!
                |
                """.trimMargin(),
            )
            .addDslScopeInterface(type)
            .addDslBuilderClass(type)
            .addDslConversionFunction(type)
            .build()
            .writeTo(outputDirectory)
    }
}

private fun FileSpec.Builder.addDslScopeInterface(type: Type): FileSpec.Builder =
    TypeSpec.interfaceBuilder(type.generatedScopeName)
        .addProperty("builder", type.builderClassName)
        .apply {
            FunSpec.builder("build")
                .addModifiers(KModifier.ABSTRACT)
                .returns(type.objectClassName)
                .build()
                .let(::addFunction)
        }
        .build()
        .let(::addType)

private fun FileSpec.Builder.addDslBuilderClass(type: Type): FileSpec.Builder =
    TypeSpec.classBuilder(type.generatedBuilderName)
        .apply {
            FunSpec.constructorBuilder()
                .addParameter("builder", type.builderClassName)
                .build()
                .let(::primaryConstructor)
        }
        .apply {
            PropertySpec.builder("builder", type.builderClassName)
                .addModifiers(KModifier.OVERRIDE)
                .initializer("builder")
                .build()
                .let(::addProperty)
        }
        .addSuperinterface(type.generatedScopeClassName)
        .apply {
            FunSpec.builder("build")
                .addModifiers(KModifier.OVERRIDE)
                .returns(type.objectClassName)
                .addStatement("return builder.build()")
                .build()
                .let(::addFunction)
        }
        .build()
        .let(::addType)

private fun FileSpec.Builder.addDslConversionFunction(type: Type): FileSpec.Builder =
    FunSpec.builder("applyDslBuilder")
        .receiver(type.builderClassName)
        .apply {
            ParameterSpec
                .builder(
                    name = "builder",
                    type = LambdaTypeName.get(
                        receiver = type.generatedScopeClassName,
                        returnType = UNIT,
                    ),
                )
                .build()
                .let(::addParameter)
        }
        .addStatement("return ${type.generatedBuilderName}(this).apply(builder).builder")
        .returns(type.builderClassName)
        .build()
        .let(::addFunction)
